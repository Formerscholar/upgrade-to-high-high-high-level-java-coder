syntax = "proto3";

import public "google/protobuf/timestamp.proto";

// 如果是两个文件中消息类型一样，则会报错，就好比java中类名一摸一样，会报错道理是一样的，因此为了区分可以给每个.proto文件增加包
package com.czdx.grpc.lib.merchant;

// 是否如果是true，那么每一个message文件都会有一个单独的class文件 否则，message全部定义在outerclass文件里
option java_multiple_files = true;
// 生成java代码的包名
option java_package = "com.czdx.grpc.lib.merchant";
// 是用一个class文件来定义所有的message对应的java类
option java_outer_classname = "VisitorApply";

// 这里面定义了一个gRPC服务，里面含有一个接口，并且还有这个接口的入参和返回结果的定义
// 会员车辆管理API列表
service VisitorApplyService {
  // RPC方法定义
  // 查询停车预约申请列表
  rpc selectBVisitorApplyList(SelectBVisitorApplyListRequest) returns (SelectBVisitorApplyListResponse) {};

  // 批量审核和驳回
  rpc updateStatus(UpdateStatusRequest) returns (UpdateStatusResponse) {};

  // 查询访客待审批数
  rpc getNotDisposedCount(GetNotDisposedCountRequest) returns (GetNotDisposedCountResponse) {};

  // 查询指定日期访客数量
  rpc countBVisitorApply(CountBVisitorApplyRequest) returns (CountBVisitorApplyResponse) {};

  // 访客统计报表
  rpc visitorApplyStatisticsSheet(VisitorApplyStatisticsSheetRequestProto) returns (VisitorApplyStatisticsSheetResponseProto) {};
}

//在消息定义中，每个字段都有唯一的一个标识符。
//这些标识符是用来在消息的二进制格式中识别各个字段的，一旦开始使用就不能够再改变。

// 访客统计报表请求参数定义
message VisitorApplyStatisticsSheetRequestProto {
  // 车场编号
  string parkNo = 1;
  // 开始日期
  string startDate = 2;
  // 结束日期
  string endDate = 3;
}

// 访客统计报表返回参数定义
message VisitorApplyStatisticsSheetResponseProto {
  repeated VisitorApplyStatisticsSheet visitApply = 1;
}

message VisitorApplyStatisticsSheet{
  string day = 1;
  string applyNum = 2;
  string visitNum = 3;
}

// 查询指定日期访客数量请求参数定义
message CountBVisitorApplyRequest {
  // 车场编号
  repeated string parkNos = 1;
  // 日期
  string day = 2;
  // 状态(0-审核中,1-已通过,2-已驳回)
  string status = 3;
}

// 查询指定日期访客数量返回参数定义
message CountBVisitorApplyResponse {
  int32 count = 1;
}

// 查询停车预约申请列表请求参数定义
message SelectBVisitorApplyListRequest {
  /** 访客码 */
  string code = 1;
  // 车场编号
  string parkNo = 2;
  // 姓名
  string name = 3;
  // 手机号
  string phone = 4;
  // 状态(0-审核中,1-已通过,2-已驳回)
  string status = 5;
  // 页码
  int32 pageNum = 6;
  // 页大小
  int32 pageSize = 7;
}

// 查询停车预约申请列表返回参数定义
message SelectBVisitorApplyListResponse {
  // 列表数据
  repeated BVisitorApplyVOProto rows = 1;
}

message BVisitorApplyVOProto {
  // 逻辑ID
  int32 id = 1;
  // 访客码
  string code = 2;
  // 车场编号
  string parkNo = 3;
  // 车场名称
  string parkName = 4;
  // 姓名
  string name = 5;
  // 手机号
  string phone = 6;
  // 车牌号
  string carNo = 7;
  // 来访日期
  string day = 8;
  // 申请时间
  string applyTime = 9;
  // 来访事由
  string visitReason = 10;
  // 状态(0-审核中,1-已通过,2-已驳回)
  string status = 11;
  // 驳回理由
  string rejectReason = 12;
  // 创建者
  string createBy = 13;
  // 创建时间
  string createTime = 14;
  // 更新者
  string updateBy = 15;
  // 更新时间
  string updateTime = 16;
}

// 批量审核和驳回请求参数定义
message UpdateStatusRequest {
  // 逻辑IDs
  repeated int32 ids = 1;
  // 状态(0-审核中,1-已通过,2-已驳回)
  string status = 2;
  // 驳回理由
  string rejectReason = 3;
  // 更新者
  string updateBy = 4;
}

// 批量审核和驳回返回参数定义
message UpdateStatusResponse {
  // 状态码
  int32 code = 1;
  // 返回内容
  string msg = 2;
  // 数据对象
  int32 data = 3;
}

// 查询访客待审批数请求参数定义
message GetNotDisposedCountRequest {
  // 车场编号
  repeated string parkNos = 1;
}

// 查询访客待审批数返回参数定义
message GetNotDisposedCountResponse {
  // 待审批数
  int32 count = 1;
}