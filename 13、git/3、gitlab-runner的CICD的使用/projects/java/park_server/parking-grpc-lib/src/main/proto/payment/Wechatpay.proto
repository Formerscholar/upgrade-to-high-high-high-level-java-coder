syntax = "proto3";

// 如果是两个文件中消息类型一样，则会报错，就好比java中类名一摸一样，会报错道理是一样的，因此为了区分可以给每个.proto文件增加包
package com.czdx.grpc.lib.wechatpay;

// 是否如果是true，那么每一个message文件都会有一个单独的class文件 否则，message全部定义在outerclass文件里
option java_multiple_files = true;
// 生成java代码的包名
option java_package = "com.czdx.grpc.lib.wechatpay";
// 是用一个class文件来定义所有的message对应的java类
option java_outer_classname = "WechatPayProto";

// 这里面定义了一个gRPC服务，里面含有一个接口，并且还有这个接口的入参和返回结果的定义
// 微信支付API列表
service WechatPayService {
  // RPC方法定义
  // JSAPI预下单接口
  rpc WechatpayTradeJsapiPay(WechatpayTradeJsapiPayRequestProto) returns (WechatpayTradeJsapiPayResponseProto) {}
  // H5预下单接口
  rpc WechatpayTradeH5Pay(WechatpayTradeH5PayRequestProto) returns (WechatpayTradeH5PayResponseProto) {}
  rpc WechatpayTradeRefund(WechatpayTradeRefundRequestProto) returns (WechatpayTradeRefundResponseProto) {}
}

//在消息定义中，每个字段都有唯一的一个标识符。
//这些标识符是用来在消息的二进制格式中识别各个字段的，一旦开始使用就不能够再改变。

// 申请退款接口请求参数定义
message WechatpayTradeRefundRequestProto{
  // -------必填参数---开始-------
  // 商户系统内部订单号，只能是数字、大小写字母_-*且在同一个商户号下唯一
  string out_trade_no = 1;
  // 商品描述
  string out_refund_no = 2;
  // 退款金额，单位为元
  double refund = 3;
  // 订单总金额，单位为元
  double total = 4;
  // 用户的客户端IP，支持IPv4和IPv6两种格式的IP地址。
  // -------必填参数---结束-------
  string reason = 5;
}

// 申请退款接口响应参数定义
message WechatpayTradeRefundResponseProto{
  string out_refund_no = 1;
  string out_trade_no = 2;
  string successTime = 3;
  string status = 4;
}

// H5下单接口请求参数定义
message WechatpayTradeH5PayRequestProto{
  // -------必填参数---开始-------
  // 商户系统内部订单号，只能是数字、大小写字母_-*且在同一个商户号下唯一
  string out_trade_no = 1;
  // 商品描述
  string description = 2;
  // 订单总金额，单位为元
  double total = 3;
  // 用户的客户端IP，支持IPv4和IPv6两种格式的IP地址。
  string payer_client_ip = 4;
  // 场景类型
  // 示例值：iOS, Android, Wap
  string h5_type = 5;
  // -------必填参数---结束-------
}

// H5下单接口响应参数定义
message WechatpayTradeH5PayResponseProto{
  string payUrl = 1;
}

// Jsapi下单接口请求参数定义
message WechatpayTradeJsapiPayRequestProto{
  // -------必填参数---开始-------
  // 商户系统内部订单号，只能是数字、大小写字母_-*且在同一个商户号下唯一
  string out_trade_no = 1;
  // 商品描述
  string description = 2;
  // 订单总金额，单位为元
  double total = 3;
  // 用户在直连商户appid下的唯一标识。下单前需获取到用户的Openid。
  string openid = 4;
  // -------必填参数---结束-------
  // 订单失效时间，遵循rfc3339标准格式，格式为yyyy-MM-DDTHH:mm:ss+TIMEZONE
  // TIMEZONE表示时区（+08:00表示东八区时间，领先UTC8小时，即北京时间）。
  // 例如：2015-05-20T13:29:35+08:00表示，北京时间2015年5月20日 13点29分35秒。
  string time_expire = 5;
  // 附加数据，在查询API和支付通知中原样返回，可作为自定义参数使用，实际情况下只有支付完成状态才会返回该字段。
  string attach = 6;
  // 订单优惠标记
  string goods_tag = 7;
  // 传入true时，支付成功消息和支付详情页将出现开票入口。需要在微信支付商户平台或微信公众平台开通电子发票功能，传此字段才可生效。
  bool support_fapiao = 8;
  // 货币类型。CNY：人民币，境内商户号仅支持人民币。
  string currency = 9;
}

// Jsapi下单接口请求参数定义
message WechatpayTradeJsapiPayResponseProto{
  // 商户申请的公众号对应的appid
  string appId = 1;
  // 时间戳，标准北京时间，时区为东八区，自1970年1月1日 0点0分0秒以来的秒数。
  string timestamp = 2;
  // 随机字符串，不长于32位。
  string nonceStr = 3;
  // JSAPI下单接口返回的prepay_id参数值，提交格式如：prepay_id=***
  string package = 4;
  // 签名类型，默认为RSA，仅支持RSA。
  string signType = 5;
  // 签名，使用字段appId、timeStamp、nonceStr、package计算得出的签名值
  string paySign = 6;

}

